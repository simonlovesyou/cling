module.exports = {
  extends: ["prettier"],
  plugins: ["@typescript-eslint", "prettier", "import", "unicorn", "@ridedott", "jest", "fp"],
  env: {
    jest: true,
    node: true,
  },
  parserOptions: {
    requireConfigFile: false,
    project: 'tsconfig.json'
  },
  settings: {
    "import/parsers": {
      "@typescript-eslint/parser": [".ts"],
    },
    "import/resolver": {
      typescript: {
        alwaysTryTypes: true,
      },
    },
  },
  parser: "@typescript-eslint/parser",
  rules: {
    "prettier/prettier": ["error"],
    // # [`eslint`](https://eslint.org/docs/rules/)
    // ## Possible errors
    // These rules relate to possible syntax or logic errors in JavaScript code:
    "comma-dangle": ["off"],
    "no-unused-vars": ["off"],
    "no-redeclare": ["off"],
    "brace-style": ["off"],
    "for-direction": ["error"], // enforce "for" loop update clause moving the counter in the right direction. [(`for-direction`)](https://eslint.org/docs/rules/for-direction)
    "getter-return": ["error"], // enforce `return` statements in getters [(`getter-return`)](https://eslint.org/docs/rules/getter-return)
    "no-async-promise-executor": ["error"], // disallow using an async function as a Promise executor [(`no-async-promise-executor`)](https://eslint.org/docs/rules/no-async-promise-executor)
    "no-compare-neg-zero": ["error"], // disallow comparing against -0 [(`no-compare-neg-zero`)](https://eslint.org/docs/rules/no-compare-neg-zero)
    "no-cond-assign": ["error"], // disallow assignment operators in conditional expressions [(`no-cond-assign`)](https://eslint.org/docs/rules/no-cond-assign)
    "no-constant-condition": ["error"], // disallow constant expressions in conditions [(`no-constant-condition`)](https://eslint.org/docs/rules/no-constant-condition)
    "no-control-regex": ["error"], // disallow control characters in regular expressions [(`no-control-regex`)](https://eslint.org/docs/rules/no-control-regex)
    "no-debugger": ["error"], // disallow the use of `debugger` [(`no-debugger`)](https://eslint.org/docs/rules/no-debugger)
    "no-dupe-args": ["error"], // disallow duplicate arguments in `function` definitions [(`no-dupe-args`)](https://eslint.org/docs/rules/no-dupe-args)
    "no-dupe-else-if": ["error"], // disallow duplicate conditions in if-else-if chains [(`no-dupe-else-if`)](https://eslint.org/docs/rules/no-dupe-else-if)
    "no-dupe-keys": ["error"], // disallow duplicate keys in object literals [(`no-dupe-keys`)](https://eslint.org/docs/rules/no-dupe-keys)
    "no-duplicate-case": ["error"], // disallow duplicate case labels [(`no-duplicate-case`)](https://eslint.org/docs/rules/no-duplicate-case)
    "no-empty": ["error"], // disallow empty block statements [(`no-empty`)](https://eslint.org/docs/rules/no-empty)
    "no-empty-character-class": ["error"], // disallow empty character classes in regular expressions [(`no-empty-character-class`)](https://eslint.org/docs/rules/no-empty-character-class)
    "no-ex-assign": ["error"], // disallow reassigning exceptions in `catch` clauses [(`no-ex-assign`)](https://eslint.org/docs/rules/no-ex-assign)
    "no-extra-boolean-cast": ["error"], // disallow unnecessary boolean casts [(`no-extra-boolean-cast`)](https://eslint.org/docs/rules/no-extra-boolean-cast)
    "no-extra-semi": ["error"], // disallow unnecessary semicolons [(`no-extra-semi`)](https://eslint.org/docs/rules/no-extra-semi)
    "no-func-assign": ["error"], // disallow reassigning `function` declarations [(`no-func-assign`)](https://eslint.org/docs/rules/no-func-assign)
    "no-import-assign": ["error"], // disallow assigning to imported bindings [(`no-import-assign`)](https://eslint.org/docs/rules/no-import-assign)
    "no-inner-declarations": ["error"], // disallow variable or `function` declarations in nested blocks [(`no-inner-declarations`)](https://eslint.org/docs/rules/no-inner-declarations)
    "no-invalid-regexp": ["error"], // disallow invalid regular expression strings in `RegExp` constructors [(`no-invalid-regexp`)](https://eslint.org/docs/rules/no-invalid-regexp)
    "no-irregular-whitespace": ["error"], // disallow irregular whitespace [(`no-irregular-whitespace`)](https://eslint.org/docs/rules/no-irregular-whitespace)
    "no-misleading-character-class": ["error"], // disallow characters which are made with multiple code points in character class syntax [(`no-misleading-character-class`)](https://eslint.org/docs/rules/no-misleading-character-class)
    "no-obj-calls": ["error"], // disallow calling global object properties as functions [(`no-obj-calls`)](https://eslint.org/docs/rules/no-obj-calls)
    "no-prototype-builtins": ["error"], // disallow calling some `Object.prototype` methods directly on objects [(`no-prototype-builtins`)](https://eslint.org/docs/rules/no-prototype-builtins)
    "no-regex-spaces": ["error"], // disallow multiple spaces in regular expressions [(`no-regex-spaces`)](https://eslint.org/docs/rules/no-regex-spaces)
    "no-setter-return": ["error"], // disallow returning values from setters [(`no-setter-return`)](https://eslint.org/docs/rules/no-setter-return)
    "no-sparse-arrays": ["error"], // disallow sparse arrays [(`no-sparse-arrays`)](https://eslint.org/docs/rules/no-sparse-arrays)
    "no-unexpected-multiline": ["error"], // disallow confusing multiline expressions [(`no-unexpected-multiline`)](https://eslint.org/docs/rules/no-unexpected-multiline)
    "no-unreachable": ["error"], // disallow unreachable code after `return`, `throw`, `continue`, and `break` statements [(`no-unreachable`)](https://eslint.org/docs/rules/no-unreachable)
    "no-unsafe-finally": ["error"], // disallow control flow statements in `finally` blocks [(`no-unsafe-finally`)](https://eslint.org/docs/rules/no-unsafe-finally)
    "no-unsafe-negation": ["error"], // disallow negating the left operand of relational operators [(`no-unsafe-negation`)](https://eslint.org/docs/rules/no-unsafe-negation)
    "use-isnan": ["error"], // require calls to `isNaN()` when checking for `NaN` [(`use-isnan`)](https://eslint.org/docs/rules/use-isnan)
    "valid-typeof": ["error"], // enforce comparing `typeof` expressions against valid strings [(`valid-typeof`)](https://eslint.org/docs/rules/valid-typeof)
    // ## Best Practices
    // These rules relate to better ways of doing things to help you avoid problems:
    "no-case-declarations": ["error"], // disallow lexical declarations in case clauses [(`no-case-declarations`)](https://eslint.org/docs/rules/no-case-declarations)
    "no-empty-pattern": ["error"], // disallow empty destructuring patterns [(`no-empty-pattern`)](https://eslint.org/docs/rules/no-empty-pattern)
    "no-fallthrough": ["error"], // disallow fallthrough of `case` statements [(`no-fallthrough`)](https://eslint.org/docs/rules/no-fallthrough)
    "no-global-assign": ["error"], // disallow assignments to native objects or read-only global variables [(`no-global-assign`)](https://eslint.org/docs/rules/no-global-assign)
    "no-octal": ["error"], // disallow octal literals [(`no-octal`)](https://eslint.org/docs/rules/no-octal)
    "no-redeclare": ["error"], // disallow variable redeclaration [(`no-redeclare`)](https://eslint.org/docs/rules/no-redeclare)
    "no-self-assign": ["error"], // disallow assignments where both sides are exactly the same [(`no-self-assign`)](https://eslint.org/docs/rules/no-self-assign)
    "no-unused-labels": ["error"], // disallow unused labels [(`no-unused-labels`)](https://eslint.org/docs/rules/no-unused-labels)
    "no-useless-catch": ["error"], // disallow unnecessary `catch` clauses [(`no-useless-catch`)](https://eslint.org/docs/rules/no-useless-catch)
    "no-useless-escape": ["error"], // disallow unnecessary escape characters [(`no-useless-escape`)](https://eslint.org/docs/rules/no-useless-escape)
    "no-with": ["error"], // disallow `with` statements [(`no-with`)](https://eslint.org/docs/rules/no-with)
    // ## Strict Mode
    // These rules relate to strict mode directives:
    "no-delete-var": ["error"], // disallow deleting variables [(`no-delete-var`)](https://eslint.org/docs/rules/no-delete-var)
    "no-shadow-restricted-names": ["error"], // disallow identifiers from shadowing restricted names [(`no-shadow-restricted-names`)](https://eslint.org/docs/rules/no-shadow-restricted-names)
    "no-undef": ["error"], // disallow the use of undeclared variables unless mentioned in `/*global */` comments [(`no-undef`)](https://eslint.org/docs/rules/no-undef)
    // ## Stylistic Issues
    // These rules relate to style guidelines, and are therefore quite subjective:
    "no-mixed-spaces-and-tabs": ["error"], // disallow mixed spaces and tabs for indentation [(`no-mixed-spaces-and-tabs`)](https://eslint.org/docs/rules/no-mixed-spaces-and-tabs)
    "constructor-super": ["error"], // require `super()` calls in constructors [(`constructor-super`)](https://eslint.org/docs/rules/constructor-super)
    "no-class-assign": ["error"], // disallow reassigning class members [(`no-class-assign`)](https://eslint.org/docs/rules/no-class-assign)
    "no-const-assign": ["error"], // disallow reassigning `const` variables [(`no-const-assign`)](https://eslint.org/docs/rules/no-const-assign)
    "no-dupe-class-members": ["error"], // disallow duplicate class members [(`no-dupe-class-members`)](https://eslint.org/docs/rules/no-dupe-class-members)
    "no-new-symbol": ["error"], // disallow `new` operators with the `Symbol` object [(`no-new-symbol`)](https://eslint.org/docs/rules/no-new-symbol)
    "no-this-before-super": ["error"], // disallow `this`/`super` before calling `super()` in constructors [(`no-this-before-super`)](https://eslint.org/docs/rules/no-this-before-super)
    "require-yield": ["error"], // require generator functions to contain `yield` [(`require-yield`)](https://eslint.org/docs/rules/require-yield)
    // # [`import`](https://github.com/benmosher/eslint-plugin-import)
    // ## Static analysis
    "import/no-unresolved": ["error"], // Ensure imports point to a file/module that can be resolved.  [(`no-unresolved`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unresolved.md)
    "import/named": ["error"], // Ensure named imports correspond to a named export in the remote file.  [(`named`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/named.md)
    "import/default": ["error"], // Ensure a default export is present, given a default import.  [(`default`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/default.md)
    "import/namespace": ["error"], // Ensure imported namespaces contain dereferenced properties as they are dereferenced.  [(`namespace`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/namespace.md)
    "import/no-restricted-paths": ["error"], // Restrict which files can be imported in a given folder  [(`no-restricted-paths`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-restricted-paths.md)
    "import/no-absolute-path": ["error"], // Forbid import of modules using absolute paths  [(`no-absolute-path`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-absolute-path.md)
    "import/no-dynamic-require": ["error"], // Forbid `require()` calls with expressions  [(`no-dynamic-require`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-dynamic-require.md)
    "import/no-webpack-loader-syntax": ["error"], // Forbid webpack loader syntax in imports  [(`no-webpack-loader-syntax`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md)
    "import/no-self-import": ["error"], // Forbid a module from importing itself  [(`no-self-import`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-self-import.md)
    "import/no-cycle": ["error"], // Forbid a module from importing a module with a dependency path back to itself  [(`no-cycle`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-cycle.md)
    "import/no-useless-path-segments": ["error"], // Prevent unnecessary path segments in import and require statements  [(`no-useless-path-segments`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-useless-path-segments.md)
    "import/no-relative-packages": ["error"], // Prevent importing packages through relative paths  [(`no-relative-packages`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-relative-packages.md)
    // ## Helpful errorings
    "import/export": ["error"], // Report any invalid exports, i.e. re-export of the same name  [(`export`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/export.md)
    "import/no-named-as-default": ["error"], // Report use of exported name as identifier of default export  [(`no-named-as-default`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-as-default.md)
    "import/no-named-as-default-member": ["error"], // Report use of exported name as property of default export  [(`no-named-as-default-member`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-as-default-member.md)
    "import/no-deprecated": ["error"], // Report imported names marked with `@deprecated` documentation tag  [(`no-deprecated`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-deprecated.md)
    "import/no-extraneous-dependencies": ["error"], // Forbid the use of extraneous packages  [(`no-extraneous-dependencies`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-extraneous-dependencies.md)
    "import/no-mutable-exports": ["error"], // Forbid the use of mutable exports with `var` or `let`.  [(`var`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md)
    "import/no-unused-modules": ["error"], // Report modules without exports, or exports without matching import in another module  [(`no-unused-modules`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unused-modules.md)
    // ## Module systems
    "import/unambiguous": ["error"], // Report potentially ambiguous parse goal (`script` vs. `module`)  [(`script`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/unambiguous.md)
    "import/no-commonjs": ["error"], // Report CommonJS `require` calls and `module.exports` or `exports.*`.  [(`require`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-commonjs.md)
    "import/no-amd": ["error"], // Report AMD `require` and `define` calls.  [(`require`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-amd.md)
    "import/no-import-module-exports": ["error"], // Forbid imports with CommonJS exports  [(`no-import-module-exports`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-import-module-exports.md)
    // ## Style guide
    "import/first": ["error"], // Ensure all imports appear before other statements  [(`first`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md)
    "import/exports-last": ["error"], // Ensure all exports appear after other statements  [(`exports-last`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/exports-last.md)
    "import/no-duplicates": ["error"], // Report repeated import of the same module in multiple places  [(`no-duplicates`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-duplicates.md)
    "import/no-namespace": ["error"], // Forbid namespace (a.k.a. "wildcard" `*`) imports  [(`no-namespace`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-namespace.md)
    "import/extensions": ["error"], // Ensure consistent use of file extension within the import path  [(`extensions`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md)
    "import/order": ["error"], // Enforce a convention in module import order  [(`order`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/order.md)
    "import/newline-after-import": ["error"], // Enforce a newline after import statements  [(`newline-after-import`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/newline-after-import.md)
    "import/prefer-default-export": ["error"], // Prefer a default export if module exports a single name  [(`prefer-default-export`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md)
    "import/no-unassigned-import": ["error"], // Forbid unassigned imports  [(`no-unassigned-import`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-unassigned-import.md)
    "import/no-named-default": ["error"], // Forbid named default exports  [(`no-named-default`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-named-default.md)
    "import/no-anonymous-default-export": ["error"], // Forbid anonymous values as default exports  [(`no-anonymous-default-export`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-anonymous-default-export.md)
    "import/dynamic-import-chunkname": ["error"], // Enforce a leading comment with the webpackChunkName for dynamic imports  [(`dynamic-import-chunkname`)](https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/dynamic-import-chunkname.md)
    // # [`unicorn`](https://github.com/sindresorhus/eslint-plugin-unicorn)
    // ## Various awesome ESLint rules
    "unicorn/better-regex": ["error"], // Improve regexes by making them shorter, consistent, and safer. [(`unicorn/better-regex`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/better-regex.md)
    "unicorn/catch-error-name": ["error"], // Enforce a specific parameter name in catch clauses. [(`unicorn/catch-error-name`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/catch-error-name.md)
    "unicorn/consistent-destructuring": ["error"], // Use destructured variables over properties. [(`unicorn/consistent-destructuring`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/consistent-destructuring.md)
    "unicorn/consistent-function-scoping": ["error"], // Move function definitions to the highest possible scope. [(`unicorn/consistent-function-scoping`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/consistent-function-scoping.md)
    "unicorn/empty-brace-spaces": ["error"], // Enforce no spaces between braces. [(`unicorn/empty-brace-spaces`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/empty-brace-spaces.md)
    "unicorn/error-message": ["error"], // Enforce passing a `message` value when creating a built-in error. [(`unicorn/error-message`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/error-message.md)
    "unicorn/escape-case": ["error"], // Require escape sequences to use uppercase values. [(`unicorn/escape-case`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/escape-case.md)
    "unicorn/expiring-todo-comments": ["error"], // Add expiration conditions to TODO comments. [(`unicorn/expiring-todo-comments`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/expiring-todo-comments.md)
    "unicorn/explicit-length-check": ["error"], // Enforce explicitly comparing the `length` or `size` property of a value. [(`unicorn/explicit-length-check`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/explicit-length-check.md)
    "unicorn/filename-case": [
      "error",
      { cases: { camelCase: true, pascalCase: true } },
    ], // Enforce a case style for filenames. [(`unicorn/filename-case`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/filename-case.md)
    "unicorn/import-style": ["error"], // Enforce specific import styles per module. [(`unicorn/import-style`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/import-style.md)
    "unicorn/new-for-builtins": ["error"], // Enforce the use of `new` for all builtins, except `String`, `Number`, `Boolean`, `Symbol` and `BigInt`. [(`unicorn/new-for-builtins`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/new-for-builtins.md)
    "unicorn/no-abusive-eslint-disable": ["error"], // Enforce specifying rules to disable in `eslint-disable` comments. [(`unicorn/no-abusive-eslint-disable`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-abusive-eslint-disable.md)
    "unicorn/no-array-callback-reference": ["error"], // Prevent passing a function reference directly to iterator methods. [(`unicorn/no-array-callback-reference`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-callback-reference.md)
    "unicorn/no-array-method-this-argument": ["error"], // Disallow using the `this` argument in array methods. [(`unicorn/no-array-method-this-argument`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-method-this-argument.md)
    "unicorn/no-array-push-push": ["error"], // Enforce combining multiple `Array#push()` into one call. [(`unicorn/no-array-push-push`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-push-push.md)
    "unicorn/no-console-spaces": ["error"], // Do not use leading/trailing space between `console.log` parameters. [(`unicorn/no-console-spaces`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-console-spaces.md)
    "unicorn/no-document-cookie": ["error"], // Do not use `document.cookie` directly. [(`unicorn/no-document-cookie`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-document-cookie.md)
    "unicorn/no-for-loop": ["error"], // Do not use a `for` loop that can be replaced with a `for-of` loop. [(`unicorn/no-for-loop`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-for-loop.md)
    "unicorn/no-hex-escape": ["error"], // Enforce the use of Unicode escapes instead of hexadecimal escapes. [(`unicorn/no-hex-escape`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-hex-escape.md)
    "unicorn/no-instanceof-array": ["error"], // Require `Array.isArray()` instead of `instanceof Array`. [(`unicorn/no-instanceof-array`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-instanceof-array.md)
    "unicorn/no-lonely-if": ["error"], // Disallow `if` statements as the only statement in `if` blocks without `else`. [(`unicorn/no-lonely-if`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-lonely-if.md)
    "unicorn/no-nested-ternary": ["error"], // Disallow nested ternary expressions. [(`unicorn/no-nested-ternary`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-nested-ternary.md)
    "unicorn/no-new-array": ["error"], // Disallow `new Array()`. [(`unicorn/no-new-array`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-new-array.md)
    "unicorn/no-new-buffer": ["error"], // Enforce the use of `Buffer.from()` and `Buffer.alloc()` instead of the deprecated `new Buffer()`. [(`unicorn/no-new-buffer`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-new-buffer.md)
    "unicorn/no-object-as-default-parameter": ["error"], // Disallow the use of objects as default parameters. [(`unicorn/no-object-as-default-parameter`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-object-as-default-parameter.md)
    "unicorn/no-process-exit": ["error"], // Disallow `process.exit()`. [(`unicorn/no-process-exit`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-process-exit.md)
    "unicorn/no-static-only-class": ["error"], // Forbid classes that only have static members. [(`unicorn/no-static-only-class`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-static-only-class.md)
    "unicorn/no-this-assignment": ["error"], // Disallow assigning `this` to a variable. [(`unicorn/no-this-assignment`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-this-assignment.md)
    "unicorn/no-unreadable-array-destructuring": ["error"], // Disallow unreadable array destructuring. [(`unicorn/no-unreadable-array-destructuring`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-unreadable-array-destructuring.md)
    "unicorn/no-useless-undefined": ["error"], // Disallow useless `undefined`. [(`unicorn/no-useless-undefined`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-useless-undefined.md)
    "unicorn/no-zero-fractions": ["error"], // Disallow number literals with zero fractions or dangling dots. [(`unicorn/no-zero-fractions`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-zero-fractions.md)
    "unicorn/number-literal-case": ["error"], // Enforce proper case for numeric literals. [(`unicorn/number-literal-case`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/number-literal-case.md)
    "unicorn/numeric-separators-style": ["error"], // Enforce the style of numeric separators by correctly grouping digits. [(`unicorn/numeric-separators-style`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/numeric-separators-style.md)
    "unicorn/prefer-add-event-listener": ["error"], // Prefer `.addEventListener()` and `.removeEventListener()` over `on`-functions. [(`unicorn/prefer-add-event-listener`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-add-event-listener.md)
    "unicorn/prefer-array-find": ["error"], // Prefer `.find(…)` over the first element from `.filter(…)`. [(`unicorn/prefer-array-find`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-find.md)
    "unicorn/prefer-array-flat": ["error"], // Prefer `Array#flat()` over legacy techniques to flatten arrays. [(`unicorn/prefer-array-flat`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-flat.md)
    "unicorn/prefer-array-flat-map": ["error"], // Prefer `.flatMap(…)` over `.map(…).flat()`. [(`unicorn/prefer-array-flat-map`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-flat-map.md)
    "unicorn/prefer-array-index-of": ["error"], // Prefer `Array#indexOf()` over `Array#findIndex()` when looking for the index of an item. [(`unicorn/prefer-array-index-of`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-index-of.md)
    "unicorn/prefer-array-some": ["error"], // Prefer `.some(…)` over `.filter(…).length` check and `.find(…)`. [(`unicorn/prefer-array-some`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-some.md)
    "unicorn/prefer-date-now": ["error"], // Prefer `Date.now()` to get the number of milliseconds since the Unix Epoch. [(`unicorn/prefer-date-now`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-date-now.md)
    "unicorn/prefer-default-parameters": ["error"], // Prefer default parameters over reassignment. [(`unicorn/prefer-default-parameters`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-default-parameters.md)
    "unicorn/prefer-dom-node-append": ["error"], // Prefer `Node#append()` over `Node#appendChild()`. [(`unicorn/prefer-dom-node-append`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-append.md)
    "unicorn/prefer-dom-node-dataset": ["error"], // Prefer using `.dataset` on DOM elements over `.setAttribute(…)`. [(`unicorn/prefer-dom-node-dataset`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-dataset.md)
    "unicorn/prefer-dom-node-remove": ["error"], // Prefer `childNode.remove()` over `parentNode.removeChild(childNode)`. [(`unicorn/prefer-dom-node-remove`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-remove.md)
    "unicorn/prefer-dom-node-text-content": ["error"], // Prefer `.textContent` over `.innerText`. [(`unicorn/prefer-dom-node-text-content`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-text-content.md)
    "unicorn/prefer-includes": ["error"], // Prefer `.includes()` over `.indexOf()` and `Array#some()` when checking for existence or non-existence. [(`unicorn/prefer-includes`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-includes.md)
    "unicorn/prefer-keyboard-event-key": ["error"], // Prefer `KeyboardEvent#key` over `KeyboardEvent#keyCode`. [(`unicorn/prefer-keyboard-event-key`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-keyboard-event-key.md)
    "unicorn/prefer-math-trunc": ["error"], // Enforce the use of `Math.trunc` instead of bitwise operators. [(`unicorn/prefer-math-trunc`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-math-trunc.md)
    "unicorn/prefer-modern-dom-apis": ["error"], // Prefer `.before()` over `.insertBefore()`, `.replaceWith()` over `.replaceChild()`, prefer one of `.before()`, `.after()`, `.append()` or `.prepend()` over `insertAdjacentText()` and `insertAdjacentElement()`. [(`unicorn/prefer-modern-dom-apis`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-modern-dom-apis.md)
    "unicorn/prefer-module": ["error"], // Prefer JavaScript modules (ESM) over CommonJS. [(`unicorn/prefer-module`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-module.md)
    "unicorn/prefer-negative-index": ["error"], // Prefer negative index over `.length - index` for `{String,Array,TypedArray}#slice()`, `Array#splice()` and `Array#at()`. [(`unicorn/prefer-negative-index`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-negative-index.md)
    "unicorn/prefer-node-protocol": ["error"], // Prefer using the `node:` protocol when importing Node.js builtin modules. [(`unicorn/prefer-node-protocol`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-node-protocol.md)
    "unicorn/prefer-number-properties": ["error"], // Prefer `Number` static properties over global ones. [(`unicorn/prefer-number-properties`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-number-properties.md)
    "unicorn/prefer-optional-catch-binding": ["error"], // Prefer omitting the `catch` binding parameter. [(`unicorn/prefer-optional-catch-binding`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-optional-catch-binding.md)
    "unicorn/prefer-prototype-methods": ["error"], // Prefer borrowing methods from the prototype instead of the instance. [(`unicorn/prefer-prototype-methods`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-prototype-methods.md)
    "unicorn/prefer-query-selector": ["error"], // Prefer `.querySelector()` over `.getElementById()`, `.querySelectorAll()` over `.getElementsByClassName()` and `.getElementsByTagName()`. [(`unicorn/prefer-query-selector`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-query-selector.md)
    "unicorn/prefer-reflect-apply": ["error"], // Prefer `Reflect.apply()` over `Function#apply()`. [(`unicorn/prefer-reflect-apply`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-reflect-apply.md)
    "unicorn/prefer-regexp-test": ["error"], // Prefer `RegExp#test()` over `String#match()` and `RegExp#exec()`. [(`unicorn/prefer-regexp-test`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-regexp-test.md)
    "unicorn/prefer-set-has": ["error"], // Prefer `Set#has()` over `Array#includes()` when checking for existence or non-existence. [(`unicorn/prefer-set-has`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-set-has.md)
    "unicorn/prefer-spread": ["error"], // Prefer the spread operator over `Array.from(…)`, `Array#concat(…)` and `Array#slice()`. [(`unicorn/prefer-spread`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-spread.md)
    "unicorn/prefer-string-slice": ["error"], // Prefer `String#slice()` over `String#substr()` and `String#substring()`. [(`unicorn/prefer-string-slice`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-string-slice.md)
    "unicorn/prefer-string-starts-ends-with": ["error"], // Prefer `String#startsWith()` & `String#endsWith()` over `RegExp#test()`. [(`unicorn/prefer-string-starts-ends-with`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-string-starts-ends-with.md)
    "unicorn/prefer-string-trim-start-end": ["error"], // Prefer `String#trimStart()` / `String#trimEnd()` over `String#trimLeft()` / `String#trimRight()`. [(`unicorn/prefer-string-trim-start-end`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-string-trim-start-end.md)
    "unicorn/prefer-switch": ["error"], // Prefer `switch` over multiple `else-if`. [(`unicorn/prefer-switch`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-switch.md)
    "unicorn/prefer-ternary": ["error"], // Prefer ternary expressions over simple `if-else` statements. [(`unicorn/prefer-ternary`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-ternary.md)
    "unicorn/prefer-type-error": ["error"], // Enforce throwing `Typeerror` in type checking conditions. [(`unicorn/prefer-type-error`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-type-error.md)
    "unicorn/prevent-abbreviations": [
      "error",
      { replacements: { props: false } },
    ], // Prevent abbreviations. [(`unicorn/prevent-abbreviations`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prevent-abbreviations.md)
    "unicorn/require-array-join-separator": ["error"], // Enforce using the separator argument with `Array#join()`. [(`unicorn/require-array-join-separator`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/require-array-join-separator.md)
    "unicorn/require-number-to-fixed-digits-argument": ["error"], // Enforce using the digits argument with `Number#toFixed()`. [(`unicorn/require-number-to-fixed-digits-argument`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/require-number-to-fixed-digits-argument.md)
    "unicorn/require-post-message-target-origin": ["error"], // Enforce using the `targetOrigin` argument with `window.postMessage()`. [(`unicorn/require-post-message-target-origin`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/require-post-message-target-origin.md)
    "unicorn/throw-new-error": ["error"], // Require `new` when throwing an error. [(`unicorn/throw-new-error`)](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/throw-new-error.md)
    // # [@ridedott/eslint-plugin](https://github.com/ridedott/eslint-plugin)
    // ## Comment rules
    "@ridedott/no-single-line-comment-block": ["error"], // Single line comments should not be in a block comment [(`@ridedott/no-single-line-comment-block`)](https://github.com/ridedott/eslint-plugin/blob/master/documentation/rules/no-single-line-comment-block.md)
    "@ridedott/no-template-literals-without-expression": ["error"], // Single line comments should not be in a block comment [(`@ridedott/no-single-line-comment-block`)](https://github.com/ridedott/eslint-plugin/blob/master/documentation/rules/no-template-literals-without-expression.md)
    // # [`eslint-plugin-jest`](https://github.com/jest-community/eslint-plugin-jest)
    "jest/expect-expect": ["error"], // Enforce assertion to be made in a test body [(`expect-expect`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/expect-expect.md)
    "jest/lowercase-name": ["error"], // Enforce lowercase test names [(`lowercase-name`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/lowercase-name.md)
    "jest/no-commented-out-tests": ["error"], // Disallow commented out tests [(`no-commented-out-tests`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-commented-out-tests.md)
    "jest/no-conditional-expect": ["error"], // Prevent calling expect conditionally [(`no-conditional-expect`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-conditional-expect.md)
    "jest/no-deprecated-functions": ["error"], // Disallow use of deprecated functions [(`no-deprecated-functions`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-deprecated-functions.md)
    "jest/no-disabled-tests": ["error"], // Disallow disabled tests [(`no-disabled-tests`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-disabled-tests.md)
    "jest/no-done-callback": ["error"], // Avoid using a callback in asynchronous tests and hooks [(`no-done-callback`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-done-callback.md)
    "jest/no-export": ["error"], // Disallow using exports in files containing tests [(`no-export`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-export.md)
    "jest/no-focused-tests": ["error"], // Disallow focused tests [(`no-focused-tests`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-focused-tests.md)
    "jest/no-interpolation-in-snapshots": ["error"], // Disallow string interpolation inside snapshots [(`no-interpolation-in-snapshots`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-interpolation-in-snapshots.md)
    "jest/no-jasmine-globals": ["error"], // Disallow Jasmine globals [(`no-jasmine-globals`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-jasmine-globals.md)
    "jest/no-jest-import": ["error"], // Disallow importing Jest [(`no-jest-import`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-jest-import.md)
    "jest/no-mocks-import": ["error"], // Disallow manually importing from __mocks__ [(`no-mocks-import`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-mocks-import.md)
    "jest/no-standalone-expect": ["error"], // Disallow using expect outside of it or test blocks [(`no-standalone-expect`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/no-standalone-expect.md)
    "jest/prefer-called-with": ["error"], // Suggest using toBeCalledWith() or toHaveBeenCalledWith() [(`prefer-called-with`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/prefer-called-with.md)
    "jest/prefer-strict-equal": ["error"], // Suggest using toStrictEqual() [(`prefer-strict-equal`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/prefer-strict-equal.md)
    "jest/require-to-throw-message": ["error"], // Require a message for toThrow() [(`require-to-throw-message`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/require-to-throw-message.md)
    "jest/require-top-level-describe": ["error"], // Require test cases and hooks to be inside a describe block [(`require-top-level-describe`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/require-top-level-describe.md)
    "jest/valid-describe": ["error"], // Enforce valid describe() callback [(`valid-describe`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/valid-describe.md)
    "jest/valid-expect": ["error"], // Enforce valid expect() usage [(`valid-expect`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/valid-expect.md)
    "jest/valid-expect-in-promise": ["error"], // Enforce having return statement when testing with promises [(`valid-expect-in-promise`)](https://github.com/jest-community/eslint-plugin-jest/blob/HEAD/docs/rules/valid-expect-in-promise.md)
    // # [`typescript-eslint`](https://github.com/typescript-eslint/typescript-eslint)
    // ## Supported Rules
    "@typescript-eslint/adjacent-overload-signatures": ["error"], // Require that member overloads be consecutive   [(`@typescript-eslint/adjacent-overload-signatures`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/adjacent-overload-signatures.md)
    "@typescript-eslint/await-thenable": ["error"], // Disallows awaiting a value that is not a Thenable [(`@typescript-eslint/await-thenable`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/await-thenable.md)
    "@typescript-eslint/ban-ts-comment": ["error"], // Bans @ts-<directive> comments from being used or requires descriptions after directive [(`@typescript-eslint/ban-ts-comment`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-ts-comment.md)
    "@typescript-eslint/ban-tslint-comment": ["error"], // Bans // tslint:<rule-flag> comments from being used [(`@typescript-eslint/ban-tslint-comment`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-tslint-comment.md)
    "@typescript-eslint/ban-types": ["error"], // Bans specific types from being used [(`@typescript-eslint/ban-types`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/ban-types.md)
    "@typescript-eslint/class-literal-property-style": ["error"], // Ensures that literals on classes are exposed in a consistent style [(`@typescript-eslint/class-literal-property-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/class-literal-property-style.md)
    "@typescript-eslint/consistent-indexed-object-style": ["error"], // Enforce or disallow the use of the record type [(`@typescript-eslint/consistent-indexed-object-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-indexed-object-style.md)
    "@typescript-eslint/consistent-type-definitions": ["error"], // Consistent with type definition either interface or type [(`@typescript-eslint/consistent-type-definitions`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-definitions.md)
    "@typescript-eslint/explicit-module-boundary-types": ["error"], // Require explicit return and argument types on exported functions' and classes' public class methods   [(`@typescript-eslint/explicit-module-boundary-types`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md)
    "@typescript-eslint/member-delimiter-style": ["error"], // Require a specific member delimiter style for interfaces and type literals [(`@typescript-eslint/member-delimiter-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/member-delimiter-style.md)
    "@typescript-eslint/method-signature-style": ["error"], // Enforces using a particular method signature syntax. [(`@typescript-eslint/method-signature-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/method-signature-style.md)
    "@typescript-eslint/naming-convention": ["error"], // Enforces naming conventions for everything across a codebase [(`@typescript-eslint/naming-convention`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/naming-convention.md)
    "@typescript-eslint/no-base-to-string": ["error"], // Requires that .toString() is only called on objects which provide useful information when stringified [(`@typescript-eslint/no-base-to-string`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-base-to-string.md)
    "@typescript-eslint/no-confusing-non-null-assertion": ["error"], // Disallow non-null assertion in locations that may be confusing [(`@typescript-eslint/no-confusing-non-null-assertion`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-confusing-non-null-assertion.md)
    "@typescript-eslint/no-confusing-void-expression": ["error"], // Requires expressions of type void to appear in statement position [(`@typescript-eslint/no-confusing-void-expression`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-confusing-void-expression.md)
    "@typescript-eslint/no-dynamic-delete": ["error"], // Disallow the delete operator with computed key expressions [(`@typescript-eslint/no-dynamic-delete`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-dynamic-delete.md)
    "@typescript-eslint/no-empty-interface": ["error"], // Disallow the declaration of empty interfaces [(`@typescript-eslint/no-empty-interface`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-empty-interface.md)
    "@typescript-eslint/no-explicit-any": ["error"], // Disallow usage of the any type [(`@typescript-eslint/no-explicit-any`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md)
    "@typescript-eslint/no-extra-non-null-assertion": ["error"], // Disallow extra non-null assertion [(`@typescript-eslint/no-extra-non-null-assertion`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-non-null-assertion.md)
    "@typescript-eslint/no-floating-promises": ["error"], // Requires Promise-like values to be handled appropriately [(`@typescript-eslint/no-floating-promises`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-floating-promises.md)
    "@typescript-eslint/no-for-in-array": ["error"], // Disallow iterating over an array with a for-in loop [(`@typescript-eslint/no-for-in-array`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-for-in-array.md)
    "@typescript-eslint/no-inferrable-types": ["error"], // Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean [(`@typescript-eslint/no-inferrable-types`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-inferrable-types.md)
    "@typescript-eslint/no-misused-new": ["error"], // Enforce valid definition of new and constructor   [(`@typescript-eslint/no-misused-new`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-misused-new.md)
    "@typescript-eslint/no-misused-promises": ["error"], // Avoid using promises in places not designed to handle them [(`@typescript-eslint/no-misused-promises`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-misused-promises.md)
    "@typescript-eslint/no-namespace": ["error"], // Disallow the use of custom TypeScript modules and namespaces   [(`@typescript-eslint/no-namespace`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-namespace.md)
    "@typescript-eslint/no-non-null-asserted-optional-chain": ["error"], // Disallows using a non-null assertion after an optional chain expression   [(`@typescript-eslint/no-non-null-asserted-optional-chain`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.md)
    "@typescript-eslint/no-parameter-properties": ["error"], // Disallow the use of parameter properties in class constructors 			[(`@typescript-eslint/no-parameter-properties`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-parameter-properties.md)
    "@typescript-eslint/no-require-imports": ["error"], // Disallows invocation of require() 			[(`@typescript-eslint/no-require-imports`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-require-imports.md)
    "@typescript-eslint/no-this-alias": ["error"], // Disallow aliasing this   [(`@typescript-eslint/no-this-alias`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-this-alias.md)
    "@typescript-eslint/no-unnecessary-qualifier": ["error"], // Warns when a namespace qualifier is unnecessary 💭[(`@typescript-eslint/no-unnecessary-qualifier`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-qualifier.md)
    "@typescript-eslint/no-unnecessary-type-arguments": ["error"], // Enforces that type arguments will not be used if not required 💭[(`@typescript-eslint/no-unnecessary-type-arguments`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-type-arguments.md)
    "@typescript-eslint/no-unnecessary-type-assertion": ["error"], // Warns if a type assertion does not change the type of an expression 💭[(`@typescript-eslint/no-unnecessary-type-assertion`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-type-assertion.md)
    "@typescript-eslint/no-unnecessary-type-constraint": ["error"], // Disallows unnecessary constraints on generic types [(`@typescript-eslint/no-unnecessary-type-constraint`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unnecessary-type-constraint.md)
    "@typescript-eslint/no-unsafe-argument": ["error"], // Disallows calling an function with an any type value [(`@typescript-eslint/no-unsafe-argument`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-argument.md)
    "@typescript-eslint/no-unsafe-assignment": ["error"], // Disallows assigning any to variables and properties [(`@typescript-eslint/no-unsafe-assignment`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-assignment.md)
    "@typescript-eslint/no-unsafe-call": ["error"], // Disallows calling an any type value [(`@typescript-eslint/no-unsafe-call`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-call.md)
    "@typescript-eslint/no-unsafe-member-access": ["error"], // Disallows member access on any typed variables [(`@typescript-eslint/no-unsafe-member-access`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-member-access.md)
    "@typescript-eslint/no-unsafe-return": ["error"], // Disallows returning any from a function [(`@typescript-eslint/no-unsafe-return`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unsafe-return.md)
    "@typescript-eslint/no-var-requires": ["error"], // Disallows the use of require statements except in import statements   [(`@typescript-eslint/no-var-requires`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-var-requires.md)
    "@typescript-eslint/non-nullable-type-assertion-style": ["error"], // Prefers a non-null assertion over explicit type cast when possible [(`@typescript-eslint/non-nullable-type-assertion-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/non-nullable-type-assertion-style.md)
    "@typescript-eslint/prefer-as-const": ["error"], // Prefer usage of as const over literal type [(`@typescript-eslint/prefer-as-const`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-as-const.md)
    "@typescript-eslint/prefer-enum-initializers": ["error"], // Prefer initializing each enums member value 			[(`@typescript-eslint/prefer-enum-initializers`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-enum-initializers.md)
    "@typescript-eslint/prefer-for-of": ["error"], // Prefer a ‘for-of’ loop over a standard ‘for’ loop if the index is only used to access the array being iterated 			[(`@typescript-eslint/prefer-for-of`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-for-of.md)
    "@typescript-eslint/prefer-function-type": ["error"], // Use function types instead of interfaces with call signatures [(`@typescript-eslint/prefer-function-type`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-function-type.md)
    "@typescript-eslint/prefer-includes": ["error"], // Enforce includes method over indexOf method [(`@typescript-eslint/prefer-includes`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-includes.md)
    "@typescript-eslint/prefer-literal-enum-member": ["error"], // Require that all enum members be literal values to prevent unintended enum member name shadow issues 			[(`@typescript-eslint/prefer-literal-enum-member`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-literal-enum-member.md)
    "@typescript-eslint/prefer-namespace-keyword": ["error"], // Require the use of the namespace keyword instead of the module keyword to declare custom TypeScript modules [(`@typescript-eslint/prefer-namespace-keyword`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-namespace-keyword.md)
    "@typescript-eslint/prefer-nullish-coalescing": ["error"], // Enforce the usage of the nullish coalescing operator instead of logical chaining [(`@typescript-eslint/prefer-nullish-coalescing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-nullish-coalescing.md)
    "@typescript-eslint/prefer-optional-chain": ["error"], // Prefer using concise optional chain expressions instead of chained logical ands 			[(`@typescript-eslint/prefer-optional-chain`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-optional-chain.md)
    "@typescript-eslint/prefer-reduce-type-parameter": ["error"], // Prefer using type parameter when calling Array#reduce instead of casting [(`@typescript-eslint/prefer-reduce-type-parameter`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-reduce-type-parameter.md)
    "@typescript-eslint/prefer-regexp-exec": ["error"], // Enforce that RegExp#exec is used instead of String#match if no global flag is provided 💭[(`@typescript-eslint/prefer-regexp-exec`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-regexp-exec.md)
    "@typescript-eslint/prefer-string-starts-ends-with": ["error"], // Enforce the use of String#startsWith and String#endsWith instead of other equivalent methods of checking substrings 💭[(`@typescript-eslint/prefer-string-starts-ends-with`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-string-starts-ends-with.md)
    "@typescript-eslint/prefer-ts-expect-error": ["error"], // Recommends using @ts-expect-error over @ts-ignore [(`@typescript-eslint/prefer-ts-expect-error`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/prefer-ts-expect-error.md)
    "@typescript-eslint/promise-function-async": ["error"], // Requires any function or method that returns a Promise to be marked async 💭[(`@typescript-eslint/promise-function-async`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/promise-function-async.md)
    "@typescript-eslint/require-array-sort-compare": ["error"], // Requires Array#sort calls to always provide a compareFunction [(`@typescript-eslint/require-array-sort-compare`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/require-array-sort-compare.md)
    "@typescript-eslint/restrict-plus-operands": ["error"], // When adding two variables, operands must both be of type number or of type string [(`@typescript-eslint/restrict-plus-operands`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-plus-operands.md)
    "@typescript-eslint/restrict-template-expressions": ["error"], // Enforce template literal expressions to be of string type [(`@typescript-eslint/restrict-template-expressions`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/restrict-template-expressions.md)
    "@typescript-eslint/sort-type-union-intersection-members": ["error"], // Enforces that members of a type union/intersection are sorted alphabetically [(`@typescript-eslint/sort-type-union-intersection-members`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/sort-type-union-intersection-members.md)
    "@typescript-eslint/strict-boolean-expressions": ["error"], // Restricts the types allowed in boolean expressions 💭[(`@typescript-eslint/strict-boolean-expressions`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/strict-boolean-expressions.md)
    "@typescript-eslint/switch-exhaustiveness-check": ["error"], // Exhaustiveness checking in switch with union type [(`@typescript-eslint/switch-exhaustiveness-check`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/switch-exhaustiveness-check.md)
    "@typescript-eslint/triple-slash-reference": ["error"], // Sets preference level for triple slash directives versus ES6-style import declarations   [(`@typescript-eslint/triple-slash-reference`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/triple-slash-reference.md)
    "@typescript-eslint/type-annotation-spacing": ["error"], // Require consistent spacing around type annotations [(`@typescript-eslint/type-annotation-spacing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/type-annotation-spacing.md)
    "@typescript-eslint/typedef": ["error"], // Requires type annotations to exist 			[(`@typescript-eslint/typedef`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/typedef.md)
    "@typescript-eslint/unbound-method": ["error"], // Enforces unbound methods are called with their expected scope [(`@typescript-eslint/unbound-method`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/unbound-method.md)
    "@typescript-eslint/unified-signatures": ["error"], // Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter 			[(`@typescript-eslint/unified-signatures`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/unified-signatures.md)
    // ## Extension Rules
    "@typescript-eslint/brace-style": ["error"], // Enforce consistent brace style for blocks [(`@typescript-eslint/brace-style`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/brace-style.md)
    "@typescript-eslint/comma-dangle": ["error", "always-multiline"], // Rquire or disallow trailing comma [(`@typescript-eslint/comma-dangle`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/comma-dangle.md)
    "@typescript-eslint/comma-spacing": ["error"], // Enforces consistent spacing before and after commas [(`@typescript-eslint/comma-spacing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/comma-spacing.md)
    "@typescript-eslint/default-param-last": ["error"], // Enforce default parameters to be last 			[(`@typescript-eslint/default-param-last`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/default-param-last.md)
    "@typescript-eslint/dot-notation": ["error"], // enforce dot notation whenever possible 💭[(`@typescript-eslint/dot-notation`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/dot-notation.md)
    "@typescript-eslint/func-call-spacing": ["error"], // Require or disallow spacing between function identifiers and their invocations [(`@typescript-eslint/func-call-spacing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/func-call-spacing.md)
    "@typescript-eslint/init-declarations": ["error"], // require or disallow initialization in variable declarations 			[(`@typescript-eslint/init-declarations`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/init-declarations.md)
    "@typescript-eslint/keyword-spacing": ["error"], // Enforce consistent spacing before and after keywords [(`@typescript-eslint/keyword-spacing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/keyword-spacing.md)
    "@typescript-eslint/lines-between-class-members": ["error"], // Require or disallow an empty line between class members [(`@typescript-eslint/lines-between-class-members`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/lines-between-class-members.md)
    "@typescript-eslint/no-array-constructor": ["error"], // Disallow generic Array constructors [(`@typescript-eslint/no-array-constructor`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-array-constructor.md)
    "@typescript-eslint/no-dupe-class-members": ["error"], // Disallow duplicate class members 			[(`@typescript-eslint/no-dupe-class-members`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-dupe-class-members.md)
    "@typescript-eslint/no-duplicate-imports": ["error"], // Disallow duplicate imports 			[(`@typescript-eslint/no-duplicate-imports`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-duplicate-imports.md)
    "@typescript-eslint/no-empty-function": ["error"], // Disallow empty functions   [(`@typescript-eslint/no-empty-function`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-empty-function.md)
    "@typescript-eslint/no-extra-parens": ["error"], // Disallow unnecessary parentheses [(`@typescript-eslint/no-extra-parens`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-parens.md)
    "@typescript-eslint/no-extra-semi": ["error"], // Disallow unnecessary semicolons [(`@typescript-eslint/no-extra-semi`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-extra-semi.md)
    "@typescript-eslint/no-implied-eval": ["error"], // Disallow the use of eval()-like methods [(`@typescript-eslint/no-implied-eval`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-implied-eval.md)
    "@typescript-eslint/no-invalid-this": ["error"], // Disallow this keywords outside of classes or class-like objects 			[(`@typescript-eslint/no-invalid-this`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-invalid-this.md)
    "@typescript-eslint/no-loop-func": ["error"], // Disallow function declarations that contain unsafe references inside loop statements 			[(`@typescript-eslint/no-loop-func`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-loop-func.md)
    "@typescript-eslint/no-loss-of-precision": ["error"], // Disallow literal numbers that lose precision 			[(`@typescript-eslint/no-loss-of-precision`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-loss-of-precision.md)
    "@typescript-eslint/no-magic-numbers": ["error"], // Disallow magic numbers 			[(`@typescript-eslint/no-magic-numbers`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-magic-numbers.md)
    "@typescript-eslint/no-redeclare": ["error"], // Disallow variable redeclaration 			[(`@typescript-eslint/no-redeclare`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-redeclare.md)
    "@typescript-eslint/no-shadow": ["error"], // Disallow variable declarations from shadowing variables declared in the outer scope 			[(`@typescript-eslint/no-shadow`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-shadow.md)
    "@typescript-eslint/no-throw-literal": ["error"], // Disallow throwing literals as exceptions [(`@typescript-eslint/no-throw-literal`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-throw-literal.md)
    "@typescript-eslint/no-unused-expressions": ["error"], // Disallow unused expressions 			[(`@typescript-eslint/no-unused-expressions`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unused-expressions.md)
    "@typescript-eslint/no-unused-vars": ["error"], // Disallow unused variables   [(`@typescript-eslint/no-unused-vars`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-unused-vars.md)
    "@typescript-eslint/no-use-before-define": ["error"], // Disallow the use of variables before they are defined 			[(`@typescript-eslint/no-use-before-define`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-use-before-define.md)
    "@typescript-eslint/no-useless-constructor": ["error"], // Disallow unnecessary constructors 			[(`@typescript-eslint/no-useless-constructor`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-useless-constructor.md)
    "@typescript-eslint/object-curly-spacing": ["error", "always"], // Enforce consistent spacing inside braces [(`@typescript-eslint/object-curly-spacing`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/object-curly-spacing.md)
    "@typescript-eslint/require-await": ["error"], // Disallow async functions which have no await expression [(`@typescript-eslint/require-await`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/require-await.md)
    "@typescript-eslint/return-await": ["error"], // Enforces consistent returning of awaited values 💭[(`@typescript-eslint/return-await`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/return-await.md)
    "@typescript-eslint/semi": ["error"], // Require or disallow semicolons instead of ASI [(`@typescript-eslint/semi`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/semi.md)
    "@typescript-eslint/space-infix-ops": ["error"], // This rule is aimed at ensuring there are spaces around infix operators. [(`@typescript-eslint/space-infix-ops`)](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/space-infix-ops.md)
    // ## [`eslint-plugin-fp`](https://github.com/jfmengels/eslint-plugin-fp)
    'fp/no-class': ['error'], // Forbid the use of class.
    'fp/no-delete': ['error'], // Forbid the use of delete.
    'fp/no-events': ['error'], // Forbid the use of the events module.
    'fp/no-get-set': ['error'], // Forbid the use of getters and setters.
    'fp/no-let': ['error'], // Forbid the use of let.
    'fp/no-loops': ['error'], // Forbid the use of loops.
    'fp/no-mutating-assign': ['error'], // Forbid the use of Object.assign() with a variable as first argument.
    'fp/no-mutating-methods': ['error'], // Forbid the use of mutating methods.
    'fp/no-mutation': ['error'], // Forbid the use of mutating operators.
    'fp/no-proxy': ['error'], // Forbid the use of Proxy.
    'fp/no-this': ['error'], // Forbid the use of this.
    'fp/no-valueof-field': ['error'], // Forbid the creation of valueOf fields.
  },
};